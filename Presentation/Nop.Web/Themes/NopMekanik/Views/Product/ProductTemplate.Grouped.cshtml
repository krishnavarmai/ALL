@model ProductDetailsModel
@using Nop.Core
@using Microsoft.AspNetCore.Http.Extensions
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject IStoreContext storeContext

@{
    var currentStore = storeContext.CurrentStore.Id;

    var settingService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<Nop.Services.Configuration.ISettingService>();
    var quickviewEnabled = settingService.GetSettingByKey<bool>("NopMekanik.QuickView", false, currentStore, true);
    bool isQuickView = quickviewEnabled && (Context.Request.Query["quickview"] == "1");

    if (!isQuickView)
    {
        Layout = "_ColumnsOne";

        //title
        Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
        //meta
        Html.AddMetaDescriptionParts(Model.MetaDescription);
        Html.AddMetaKeywordParts(Model.MetaKeywords);
        //page class
        Html.AppendPageCssClassParts("html-product-details-page");

        //canonical URL
        if (seoSettings.CanonicalUrlsEnabled)
        {
            var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
            Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
        }

        //open graph META tags
        if (seoSettings.OpenGraphMetaTags)
        {
            Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
            Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
            Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
            Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
            Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(true) + "\" />");
            Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        }

        //Twitter META tags
        if (seoSettings.TwitterMetaTags)
        {
            Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
            Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
            Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
            Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
            Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
            Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(true) + "\" />");
        }
    }
    else
    {
        Layout = "_Root.Head";
    }

}

@if (!isQuickView)
{
    <!--product breadcrumb-->
    @section Breadcrumb
        {
        @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
}

<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">

            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="product-essential row">
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforePictures, additionalData = Model })
                    <div class="gallery col-lg-5 col-md-6">
                        <!--product pictures-->
                        @await Html.PartialAsync("_ProductDetailsPictures", Model)
                        @if (isQuickView)
                        {
                            <p id="qv-product-page">
                                <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">@T("nopmekanik.quickview.gotoproductpage")  <i class="fa fa-arrow-right"></i></a>
                            </p>
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterPictures, additionalData = Model })
                    </div>
                    <div class="overview col-lg-7 col-md-6">
                        @await Html.PartialAsync("_Discontinued", Model)
                        <div class="product-name">
                            <h1 itemprop="name">
                                @Model.Name
                            </h1>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.ShortDescription))
                        {
                            <div class="short-description">
                                @Html.Raw(Model.ShortDescription)
                            </div>
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                        <!--product reviews-->
                        @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                        <!--product manufacturers-->
                        @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                        <!--compare, email a friend-->
                        <div class="overview-buttons">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                            @**@
                            @if (isQuickView)
                            {
                                <button type="button" class="button-1 goto-productpage" onclick="location.href ='@Url.RouteUrl("Product", new { SeName = Model.SeName })'">
                                    <span>@T("NopMekanik.GoToProductPage")</span>
                                </button>
                            }
                            @await Html.PartialAsync("_CompareProductsButton", Model)
                            @if (!isQuickView)
                            {
                                @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                            }
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                        </div>
                        @if (!isQuickView)
                        {
                            @await Html.PartialAsync("_ShareButton", Model)
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                    </div>
                </div>
                <div class="clearfix"></div>
                @if (!isQuickView)
                {
                    <!--associated products-->
                    <div class="row prodcut-variant-list">
                        @foreach (var variant in Model.AssociatedProducts)
                        {
                            <div class="col-lg-6" data-productid="@variant.Id">
                                <div class="product-variant-line">
                                    <div class="row">
                                        @if (!string.IsNullOrWhiteSpace(variant.DefaultPictureModel.ImageUrl))
                                        {
                                            <div class="col-sm-5">
                                                <div class="picture">
                                                    <img alt="@variant.DefaultPictureModel.AlternateText" src="@variant.DefaultPictureModel.ImageUrl"
                                                         title="@variant.DefaultPictureModel.Title" id="main-product-img-@variant.Id" />
                                                </div>
                                            </div>
                                        }
                                        <div class="col-sm-7">
                                            <div class="variant-overview">
                                                @if (!string.IsNullOrWhiteSpace(variant.Name))
                                                {
                                                    <h3 class="variant-name">
                                                        @variant.Name
                                                    </h3>
                                                }
                                                @if (!string.IsNullOrWhiteSpace(variant.ShortDescription))
                                                {
                                                    <div class="variant-description">
                                                        @Html.Raw(variant.ShortDescription)
                                                    </div>
                                                }
                                                <!--availability-->
                                                @await Html.PartialAsync("_Availability", variant)
                                                <!--SKU, MAN, GTIN, vendor-->
                                                @await Html.PartialAsync("_SKU_Man_GTIN_Ven", variant)
                                                <!--delivery-->
                                                @await Html.PartialAsync("_DeliveryInfo", variant)
                                                <!--sample download-->
                                                @await Html.PartialAsync("_DownloadSample", variant)
                                                <!--attributes-->
                                                @{
                                                    var dataDictAttributes = new ViewDataDictionary(ViewData);
                                                    dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{variant.Id}";
                                                    @await Html.PartialAsync("_ProductAttributes", variant.ProductAttributes, dataDictAttributes)
                                                }
                                                <!--gift card-->
                                                @{
                                                    var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                                    dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{variant.Id}";
                                                    @await Html.PartialAsync("_GiftCardInfo", variant.GiftCard, dataDictGiftCard)
                                                }
                                                <!--rental info-->
                                                @{
                                                    var dataDictRental = new ViewDataDictionary(ViewData);
                                                    dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{variant.Id}";
                                                    @await Html.PartialAsync("_RentalInfo", variant, dataDictRental)
                                                }
                                                <!--price & add to cart-->
                                                @{
                                                    var dataDictPrice = new ViewDataDictionary(ViewData);
                                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{variant.Id}";
                                                    @await Html.PartialAsync("_ProductPrice", variant.ProductPrice, dataDictPrice)
                                                }
                                                <!--price breaks-->
                                                @await Html.PartialAsync("_ProductTierPrices", variant.TierPrices)
                                                <div class="variant-buttons">
                                                    @{
                                                        var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                                        dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{variant.Id}";
                                                        @await Html.PartialAsync("_AddToCart", variant.AddToCart, dataDictAddToCart)
                                                    }
                                                    <!--wishlist-->
                                                    @{
                                                        var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                                        dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{variant.Id}";
                                                        @await Html.PartialAsync("_AddToWishlist", variant.AddToCart, dataDictAddToWishlist)
                                                    }
                                                    <div class="clearfix"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        @if (Model.AssociatedProducts.Count == 0)
                        {
                            <div class="no-associated-products">
                                @T("Products.NoAssociatedProducts")
                            </div>
                        }
                    </div>
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                @if (!isQuickView)
                {
                    <div class="product-collateral">
                        @{

                            var specification = await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications);

                            var tag = await Html.PartialAsync("_ProductTags", Model.ProductTags);

                            if (!string.IsNullOrEmpty(Model.FullDescription) || !string.IsNullOrWhiteSpace(specification.ToHtmlString()) ||
                                        !string.IsNullOrWhiteSpace(tag.ToHtmlString()))
                            {
                                <div class="row">
                                    <div class="col-md-12">
                                        <ul class="nav nav-tabs" id="myTab">
                                            @if (!string.IsNullOrEmpty(Model.FullDescription))
                                            {
                                                <li class="nav-item"><a href="#description" class="nav-link active" data-toggle="tab">@T("NopMekanik.Description")</a></li>
                                            }
                                            @if (!string.IsNullOrWhiteSpace(specification.ToHtmlString()))
                                            {
                                                <li class="nav-item">
                                                    <a href="#specification" data-toggle="tab"
                                                       class="nav-link @if (string.IsNullOrEmpty(Model.FullDescription))
                                                {<text>active</text>}">
                                                        @T("Products.Specs")
                                                    </a>
                                                </li>
                                            }
                                            @if (!string.IsNullOrWhiteSpace(tag.ToHtmlString()))
                                            {
                                                <li class="nav-item">
                                                    <a href="#tag" data-toggle="tab"
                                                       class="nav-link @if (string.IsNullOrEmpty(Model.FullDescription) && !string.IsNullOrWhiteSpace(specification.ToHtmlString()))
                                                                           {<text>active</text>}">
                                                        @T("Products.Tags")
                                                    </a>
                                                </li>
                                            }
                                        </ul>
                                        <div class="tab-content">
                                            @if (!string.IsNullOrEmpty(Model.FullDescription))
                                            {
                                                <div class="tab-pane inner notop active" id="description" itemprop="description">
                                                    @Html.Raw(Model.FullDescription)
                                                </div>
                                            }
                                            @if (string.IsNullOrEmpty(Model.FullDescription) && !string.IsNullOrWhiteSpace(specification.ToHtmlString()))
                                            {
                                                <div class="tab-pane inner notop active" id="specification">
                                                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="tab-pane inner notop" id="specification">
                                                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                                                </div>
                                            }
                                            @if (string.IsNullOrEmpty(Model.FullDescription) && !string.IsNullOrWhiteSpace(specification.ToHtmlString()))
                                            {
                                                <div class="tab-pane inner notop active" id="tag">
                                                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="tab-pane inner notop" id="tag">
                                                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }

                        @*  @if (!string.IsNullOrEmpty(Model.FullDescription))
                            {
                                <div class="full-description" itemprop="description">
                                    @Html.Raw(Model.FullDescription)
                                </div>
                            }

                            @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                                @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                            </div>
                            @*we do not display "also purchased" for grouped products
                            @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })*@
                        @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                    </div>
                }
            </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>
