@model HeaderLinksModel
@using System.Text.Encodings.Web
<div class="row">
    <div class="header-links" style="padding-left:10px" >
        <ul>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore })
            @if (Model.IsAuthenticated)
            {
                <li><a href="@Url.RouteUrl("CustomerInvoices")" class="ico-account">Invoices</a></li>
                <li><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account">My PCS@*@Model.CustomerName*@</a></li>
                <li><a href="@Url.RouteUrl("Logout")" class="ico-logout">Sign Out</a></li>
            }
            else
            {
                <li><a href="@Url.RouteUrl("Register")" class="ico-register">@T("Account.Register")</a></li>
                <li><a href="@Url.RouteUrl("Login")" class="ico-login">@T("Account.Login")</a></li>
            }
            @if (Model.AllowPrivateMessages)
            {
                <li>
                    <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                        <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                        <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                    </a>
                </li>
            }
            @if (Model.WishlistEnabled)
            {
                <li>
                    <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                        <span class="wishlist-label">@T("Wishlist")</span>
                        <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                    </a>
                </li>
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter })
        </ul>
        @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
        {
            //new private message notification
            <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
            </script>
        }
    </div>

</div>